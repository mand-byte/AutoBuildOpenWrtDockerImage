name: Build OpenWrt x86_64 Docker Image (for NAS)

on:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'LAN IP Address'
        required: false
        default: '192.168.1.1'
      TIMEZONE:
        description: 'Timezone'
        required: false
        default: 'CST-8'
      ZONENAME:
        description: 'Zone Name'
        required: false
        default: 'Asia/Shanghai'

env:
  LAN_IP: ${{ github.event.inputs.LAN_IP || vars.LAN_IP || '192.168.1.1' }}
  PPPoE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPoE_PASSWORD: ${{ secrets.PPPOE_PASSWORD }}
  PASSWORD: ${{ secrets.PASSWORD || 'password' }}
  TIMEZONE: ${{ github.event.inputs.TIMEZONE || vars.TIMEZONE || 'CST-8' }}
  ZONENAME: ${{ github.event.inputs.ZONENAME || vars.ZONENAME || 'Asia/Shanghai' }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev \
            libncursesw5-dev libssl-dev python3 \
            python3-setuptools python3-dev rsync subversion swig \
            unzip wget file time xsltproc zlib1g-dev

      - name: Clone OpenWrt source code
        run: |
          git clone https://github.com/openwrt/openwrt.git
          cd openwrt
          git fetch --tags
          # 获取最新 openwrt-x.y.z tag（不带rc）
          TAG=$(git tag | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | grep -v rc | tail -n1)
          if [ -z "$TAG" ]; then
            echo "No stable tag found!"
            exit 1
          fi
          echo "Switching to tag: $TAG"
          git checkout $TAG
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Add custom feeds
        working-directory: openwrt
        run: |
          if [ -f ../../customfeeds.conf ]; then
            cat ../../customfeeds.conf >> feeds.conf.default
          fi

      - name: Update and install custom feeds
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Copy custom .config
        run: |
          cp ../.config .config
        working-directory: openwrt

      - name: Defconfig fallback
        working-directory: openwrt
        run: |
          [ -f .config ] || make defconfig

      - name: Customize network config (LAN & PPPoE)
        working-directory: openwrt
        run: |
          mkdir -p files/etc/config
          cat > files/etc/config/network <<EOF
          config interface 'lan'
              option ifname 'eth0'
              option proto 'static'
              option ipaddr '${LAN_IP}'
              option netmask '255.255.255.0'

          config interface 'wan'
              option ifname 'eth1'
              option proto 'pppoe'
              option username '${PPPoE_USERNAME}'
              option password '${PPPoE_PASSWORD}'
          EOF
      - name: Set timezone config
        working-directory: openwrt
        run: |
          mkdir -p files/etc/config
          cat > files/etc/config/system <<EOF
          config system
              option hostname 'OpenWrt'
              option timezone '${TIMEZONE}'
              option zonename '${ZONENAME}'
          EOF
      - name: Set root password
        working-directory: openwrt
        run: |
          PASSWD=$(openssl passwd -1 '${PASSWORD}')
          mkdir -p files/etc
          SHADOW_FILE=package/base-files/files/etc/shadow
          if [ ! -f "$SHADOW_FILE" ]; then
            echo "root:*:0:0:99999:7:::" > files/etc/shadow
          else
            awk -F: -v p="$PASSWD" '{
              if ($1=="root") $2=p;
              print $0
            }' $SHADOW_FILE > files/etc/shadow
          fi
      - name: Build firmware
        working-directory: openwrt
        run: |
          make -j$(nproc) download V=s || make -j1 V=s download
          make -j$(nproc) V=s

      - name: Prepare Docker context with rootfs
        run: |
          mkdir -p docker-context
          ROOTFS_TAR=$(find openwrt/bin/targets/ -type f -name '*rootfs.tar.gz' | head -n 1)
          if [ -z "$ROOTFS_TAR" ]; then
            echo "No rootfs tar.gz found! Build may have failed."
            exit 1
          fi
          cp "$ROOTFS_TAR" docker-context/openwrt-rootfs.tar.gz
          DATE_TAG=$(date +%Y%m%d)
          echo "DATE_TAG=$DATE_TAG" >> $GITHUB_ENV
          cat > docker-context/Dockerfile <<EOF
          FROM scratch
          ADD openwrt-rootfs.tar.gz /
          CMD ["/sbin/init"]
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile
          push: false
          tags: openwrt-nas:${{ env.DATE_TAG }}

      - name: Save Docker image as tar
        run: |
          docker save openwrt-nas:${DATE_TAG} -o openwrt-nas-docker-image-${DATE_TAG}.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-nas-docker-image-${{ env.DATE_TAG }}
          path: openwrt-nas-docker-image-${{ env.DATE_TAG }}.tar
