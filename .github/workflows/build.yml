name: Build OpenWrt x86_64 Docker Image (for NAS)

on:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'LAN IP Address'
        required: false
        default: '192.168.1.1'

env:
  LAN_IP: ${{ github.event.inputs.LAN_IP || vars.LAN_IP || '192.168.1.1' }}
  PPPoE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPoE_PASSWORD: ${{ secrets.PPPOE_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            rsync unzip zlib1g-dev file wget

      - name: Clone OpenWrt source code
        run: |
          git clone --depth 1 https://github.com/openwrt/openwrt.git
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Add Passwall2, TurboACC and update feeds
        working-directory: openwrt
        run: |
          echo "src-git passwall2 https://github.com/xiaorouji/openwrt-passwall2.git;main" >> feeds.conf.default
          echo "src-git turboacc https://github.com/fw876/helloworld" >> feeds.conf.default
          ./scripts/feeds update passwall2 turboacc
          ./scripts/feeds install passwall2 luci-app-turboacc

      - name: Select Passwall2, TurboACC, DDNS, UPnP in .config
        working-directory: openwrt
        run: |
          make defconfig
          sed -i '/^# CONFIG_PACKAGE_luci-app-passwall2 is not set/a CONFIG_PACKAGE_luci-app-passwall2=y' .config
          sed -i '/^# CONFIG_PACKAGE_luci-app-turboacc is not set/a CONFIG_PACKAGE_luci-app-turboacc=y' .config
          sed -i '/^# CONFIG_PACKAGE_luci-app-ddns is not set/a CONFIG_PACKAGE_luci-app-ddns=y' .config
          sed -i '/^# CONFIG_PACKAGE_luci-app-upnp is not set/a CONFIG_PACKAGE_luci-app-upnp=y' .config
          make defconfig
      - name: Add Luci Chinese translations
        working-directory: openwrt
        run: |
          echo "CONFIG_PACKAGE_luci-i18n-base-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-app-upnp-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-app-ddns-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-app-passwall2-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-app-turboacc-zh-cn=y" >> .config
          make defconfig
      - name: Customize network config (LAN & PPPoE)
        working-directory: openwrt
        run: |
          mkdir -p files/etc/config
          cat > files/etc/config/network <<EOF
          config interface 'lan'
              option ifname 'eth0'
              option proto 'static'
              option ipaddr '${LAN_IP}'
              option netmask '255.255.255.0'

          config interface 'wan'
              option ifname 'eth1'
              option proto 'pppoe'
              option username '${PPPoE_USERNAME}'
              option password '${PPPoE_PASSWORD}'
          EOF

      - name: Build firmware
        working-directory: openwrt
        run: |
          make -j$(nproc) download V=s || make -j1 V=s download
          make -j$(nproc) V=s

      - name: Prepare Docker context with rootfs
        run: |
          mkdir docker-context
          ROOTFS_TAR=$(ls openwrt/bin/targets/x86/64/*rootfs.tar.gz | head -n 1)
          cp "$ROOTFS_TAR" docker-context/openwrt-rootfs.tar.gz
          DATE_TAG=$(date +%Y%m%d)
          echo "DATE_TAG=$DATE_TAG" >> $GITHUB_ENV
          cat > docker-context/Dockerfile <<EOF
          FROM scratch
          ADD openwrt-rootfs.tar.gz /
          CMD ["/sbin/init"]
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile
          push: false
          tags: openwrt-nas:${{ env.DATE_TAG }}

      - name: Save Docker image as tar
        run: |
          docker save openwrt-nas:${DATE_TAG} -o openwrt-nas-docker-image-${DATE_TAG}.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-nas-docker-image-${{ env.DATE_TAG }}
          path: openwrt-nas-docker-image-${{ env.DATE_TAG }}.tar
