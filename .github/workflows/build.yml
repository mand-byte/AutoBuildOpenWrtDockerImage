name: Build OpenWrt Docker Image (for NAS)

on:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'LAN IP Address'
        required: false
        default: '192.168.1.1'

env:
  LAN_IP: ${{ github.event.inputs.LAN_IP }}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86_64, armsr_armv8]
        docker_platform: [amd64, arm64]
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev \
            libncursesw5-dev libssl-dev python3 \
            python3-setuptools python3-dev rsync subversion swig \
            unzip wget file time xsltproc zlib1g-dev

      - name: Clone OpenWrt source code
        run: |
          git clone https://github.com/openwrt/openwrt.git
          cd openwrt
          git fetch --tags
          # 获取最新 openwrt-x.y.z tag（不带rc）
          TAG=$(git tag | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | grep -v rc | tail -n1)
          if [ -z "$TAG" ]; then
            echo "No stable tag found!"
            exit 1
          fi
          echo "Switching to tag: $TAG"
          git checkout $TAG
      - name: Add custom feeds
        working-directory: openwrt
        run: |
          if [ -f ../../customfeeds.conf ]; then
            cat ../../customfeeds.conf >> feeds.conf.default
          fi

      - name: Update and install custom feeds
        working-directory: openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: Copy custom .config
        run: |
          cat ../.config >> .config
        working-directory: openwrt

      # 配置 OpenWrt
      - name: Configure OpenWrt for ${{ matrix.arch }}
        run: |
          cd openwrt
          
          # 根据架构选择目标
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo -e "\nCONFIG_TARGET_x86=y\nCONFIG_TARGET_x86_64=y\nCONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
          elif [ "${{ matrix.arch }}" = "armsr_armv8" ]; then
            echo -e "\nCONFIG_TARGET_armsr=y\nCONFIG_TARGET_armsr_armv8=y\nCONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
          fi
          make defconfig


      - name: Customize network config (LAN & PPPoE)
        working-directory: openwrt
        run: |
          mkdir -p files/etc/config
          cat > files/etc/config/network <<EOF
          config interface 'lan'
              option ifname 'eth0'
              option proto 'static'
              option ipaddr '${LAN_IP}'
              option netmask '255.255.255.0'
          EOF
      - name: Build firmware
        working-directory: openwrt
        run: |
          make -j$(nproc) download V=s || make -j1 V=s download
          make -j$(nproc) V=s

      

      # 设置 Docker 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 查找 rootfs 路径
      - name: Locate rootfs
        id: locate-rootfs
        run: |
          ROOTFS_PATH=$(find openwrt/bin/targets -name "openwrt-*.tar.gz" | head -n1)
          echo "rootfs-path=$ROOTFS_PATH" >> $GITHUB_OUTPUT

      # 登录 GitHub Container Registry
      - name: Login to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          ROOTFS_PATH=${{ steps.locate-rootfs.outputs.rootfs-path }}
          DOCKER_IMAGE_LATEST=ghcr.io/${{ github.repository_owner }}/openwrt-${{ matrix.arch }}:latest

          # 创建 Dockerfile
          cat << EOF > Dockerfile
          FROM scratch
          ADD $ROOTFS_PATH /
          CMD ["/sbin/init"]
          EOF

          docker buildx build --platform linux/${{ matrix.docker_platform }} \
            -t $DOCKER_IMAGE_LATEST --push .
